<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.hotusm.framework</groupId>
  <artifactId>FrameWork</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  
  <properties>
  	<java.version>1.7</java.version>
  </properties>
  <dependencies>
  
  	<!-- https://mvnrepository.com/artifact/org.apache.commons/commons-lang3 -->
	<dependency>
	    <groupId>org.apache.commons</groupId>
	    <artifactId>commons-lang3</artifactId>
	    <version>3.4</version>
	</dependency>
  	<!-- https://mvnrepository.com/artifact/log4j/log4j -->
	<dependency>
	    <groupId>log4j</groupId>
	    <artifactId>log4j</artifactId>
	    <version>1.2.17</version>
	</dependency>
  	<!-- https://mvnrepository.com/artifact/commons-lang/commons-lang -->
	<dependency>
	    <groupId>commons-lang</groupId>
	    <artifactId>commons-lang</artifactId>
	    <version>2.6</version>
	</dependency>
	<!-- https://mvnrepository.com/artifact/commons-logging/commons-logging -->
	<dependency>
	    <groupId>commons-logging</groupId>
	    <artifactId>commons-logging</artifactId>
	    <version>1.2</version>
	</dependency>
	<!-- netty -->	
  	  	<dependency>
	    <groupId>io.netty</groupId>
	    <artifactId>netty-all</artifactId>
	    <version>5.0.0.Alpha2</version>
	</dependency>
	
     <dependency>
         <groupId>org.apache.thrift</groupId>
         <artifactId>libthrift</artifactId>
         <version>0.8.0</version>
     </dependency>
	
  </dependencies>
  <build>
  	<plugins>
  			 <!-- 编译插件 -->
                <plugin>
				    <groupId>org.apache.maven.plugins</groupId>
				    <artifactId>maven-compiler-plugin</artifactId>
				    <version>3.1</version>
				    <configuration>
				        <source>${java.version}</source> <!-- 源代码使用的开发版本 -->
				        <target>${java.version}</target> <!-- 需要生成的目标class文件的编译版本 -->
				        <!-- 一般而言，target与source是保持一致的，但是，有时候为了让程序能在其他版本的jdk中运行(对于低版本目标jdk，源代码中需要没有使用低版本jdk中不支持的语法)，会存在target不同于source的情况 -->
				    
				        <!-- 这下面的是可选项 -->
				        <meminitial>128m</meminitial>
				        <maxmem>512m</maxmem>
				        <fork>true</fork> <!-- fork is enable,用于明确表示编译版本配置的可用 --> 
				        <compilerVersion>1.3</compilerVersion>
				        
				        <!-- 这个选项用来传递编译器自身不包含但是却支持的参数选项 -->
				        <compilerArgument>-verbose -bootclasspath ${java.home}\lib\rt.jar</compilerArgument>
				        
				    </configuration>
				</plugin>
				
  		</plugins>
  		</build>
</project>